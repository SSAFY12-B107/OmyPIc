export interface Scores {
    total_score: string | null;
    comboset_score: string | null;
    roleplaying_score: string | null;
    unexpected_score: string | null;
}
export interface TestHistory {
    id: string;
    overall_feedback_status: string;
    test_date: string;
    test_type: boolean;
    test_score: Scores | null;
}
export interface AverageScore {
    total_score: string | null;
    comboset_score: string | null;
    roleplaying_score: string | null;
    unexpected_score: string | null;
}
export interface UserHistoryResponse {
    average_score: AverageScore;
    test_history: TestHistory[];
    test_counts: {
        test_count: {
            used: number;
            limit: number;
            remaining: number;
        };
        random_problem: {
            used: number;
            limit: number;
            remaining: number;
        };
    };
}
export declare const useUserHistory: (options?: {
    enablePolling?: boolean;
    pollingInterval?: number;
    recentTestId?: string;
    onFeedbackReady?: (testHistory: TestHistory) => void;
}) => {
    isPolling: boolean;
    startPolling: () => void;
    stopPolling: () => void;
    data: UserHistoryResponse;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    isPlaceholderData: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<UserHistoryResponse, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<UserHistoryResponse>;
} | {
    isPolling: boolean;
    startPolling: () => void;
    stopPolling: () => void;
    data: UserHistoryResponse;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    isPlaceholderData: false;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<UserHistoryResponse, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<UserHistoryResponse>;
} | {
    isPolling: boolean;
    startPolling: () => void;
    stopPolling: () => void;
    data: undefined;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    isPlaceholderData: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<UserHistoryResponse, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<UserHistoryResponse>;
} | {
    isPolling: boolean;
    startPolling: () => void;
    stopPolling: () => void;
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    isPlaceholderData: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<UserHistoryResponse, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<UserHistoryResponse>;
} | {
    isPolling: boolean;
    startPolling: () => void;
    stopPolling: () => void;
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    isPlaceholderData: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<UserHistoryResponse, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<UserHistoryResponse>;
} | {
    isPolling: boolean;
    startPolling: () => void;
    stopPolling: () => void;
    data: UserHistoryResponse;
    isError: false;
    error: null;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    isPlaceholderData: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<UserHistoryResponse, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<UserHistoryResponse>;
};
